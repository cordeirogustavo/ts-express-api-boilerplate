const {
  APP_NAME,
  APP_PORT,
  APP_SLUG,
  APP_ENV,
  APP_LOG_LEVEL,
  AWS_S3_REGION,
  AWS_S3_BUCKET_NAME,
  AWS_S3_ENDPOINT,
  AWS_ACCESS_KEY_ID,
  AWS_SECRET_KEY,
  DATABASE_HOST,
  DATABASE_PORT,
  DATABASE_NAME,
  DATABASE_USERNAME,
  DATABASE_PASSWORD,
  DATABASE_DATA_LIMIT,
  DATABASE_IDLE_TRANSACTION_TIMEOUT,
  DATABASE_CONNECTION_TIMEOUT,
  DATABASE_STATEMENT_TIMEOUT,
  DATABASE_QUERY_TIMEOUT,
  DATABASE_IGNORE_SSL,
  QUEUE_HOST,
  QUEUE_VHOST,
  QUEUE_USERNAME,
  QUEUE_PASSWORD,
  QUEUE_SOCKET_TIMEOUT,
  PRIORITY_REPORT_QUEUE,
  CACHE_HOST,
  CACHE_PORT,
  CACHE_PASSWORD,
  CACHE_TTL,
  CACHE_TLS,
  CACHE_DB_INDEX,
  STORAGE_PROVIDER,
  SCHEMA_PROVIDER,
  QUEUE_PROVIDER,
  UPLOAD_PROVIDER,
  CACHE_PROVIDER,
  DATABASE_PROVIDER,
  MAX_BODY_SIZE,
  SERVER_TIMEOUT,
  MZ_CORE_API_URL,
  TEMP_FOLDER,
  UPLOADS_FOLDER,
} = process.env;

process.settings = {
  app: {
    name: APP_NAME,
    port: +(APP_PORT || 5000),
    slug: APP_SLUG,
    env: APP_ENV,
    logLevel: APP_LOG_LEVEL,
    maxBodySize: MAX_BODY_SIZE,
    serverTimeout: +SERVER_TIMEOUT,
  },
  api: {},
  mziq: {
    url: MZ_CORE_API_URL,
  },
  aws: {
    keyId: AWS_ACCESS_KEY_ID,
    secretKey: AWS_SECRET_KEY,
    s3: {
      region: AWS_S3_REGION,
      bucket: AWS_S3_BUCKET_NAME,
      endpoint: AWS_S3_ENDPOINT,
    },
  },
  database: {
    host: DATABASE_HOST,
    port: DATABASE_PORT,
    name: DATABASE_NAME,
    username: DATABASE_USERNAME,
    password: DATABASE_PASSWORD,
    dataLimit: +(DATABASE_DATA_LIMIT || 1),
    idleInTransactionSessionTimeout: +(
      DATABASE_IDLE_TRANSACTION_TIMEOUT || 1000 * 60 * 5
    ),
    connectionTimeoutMillis: +(DATABASE_CONNECTION_TIMEOUT || 1000 * 60 * 3),
    statementTimeout: +(DATABASE_STATEMENT_TIMEOUT || 1000 * 60 * 5),
    queryTimeout: +(DATABASE_QUERY_TIMEOUT || 1000 * 60 * 6),
    ignoreSsl: DATABASE_IGNORE_SSL === "true",
  },
  providers: {
    storage: STORAGE_PROVIDER || "disk",
    schema: SCHEMA_PROVIDER || "zod",
    upload: UPLOAD_PROVIDER || "multer",
    queue: QUEUE_PROVIDER || "rabbitmq",
    cache: CACHE_PROVIDER || "redis",
    database: DATABASE_PROVIDER || "pgPromise",
  },
  cache: {
    host: CACHE_HOST,
    port: CACHE_PORT,
    password: CACHE_PASSWORD,
    ttl: CACHE_TTL,
    tls: !!CACHE_TLS,
    dbIndex: +(CACHE_DB_INDEX || 0),
  },
  queue: {
    host: QUEUE_HOST,
    vhost: QUEUE_VHOST,
    username: QUEUE_USERNAME,
    password: QUEUE_PASSWORD,
    socketTimeout: QUEUE_SOCKET_TIMEOUT,
    queues: {
      priorityReport: PRIORITY_REPORT_QUEUE,
    },
  },
  storage: {
    tmpFolder: TEMP_FOLDER,
    uploadsFolder: UPLOADS_FOLDER,
  },
};
